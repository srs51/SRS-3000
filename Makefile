# DO NOT EDIT THIS FILE unless you know what you are doing!
# User-configurable compile options are in Makefile.in

OS=$(shell uname)-$(shell uname -m)
PFX=$(shell pwd)/src/
ZERO=0 ###hopefully this will fix origin histogram bug
include Makefile.in

LDLIBS+=-lm # pretty much everything needs the math library...

##### set flags for different options #####

ifeq ($(USE_COLLISIONS), true)
PKD_CFLAGS+=-DCOLLISIONS
endif

ifeq ($(USE_AGGREGATES), true)
ifneq ($(USE_COLLISIONS), true)
PKD_CFLAGS+=-DCOLLISIONS
USE_COLLISIONS=true
endif
PKD_CFLAGS+=-DAGGS
endif

ifeq ($(USE_SPRINGS), true)
ifneq ($(USE_COLLISIONS), true)
PKD_CFLAGS+=-DCOLLISIONS
USE_COLLISIONS=true
endif
PKD_CFLAGS+=-DSPRINGS
endif

ifeq ($(USE_DEM), true)
ifneq ($(USE_COLLISIONS), true)
PKD_CFLAGS+=-DCOLLISIONS
USE_COLLISIONS=true
endif
PKD_CFLAGS+=-DDEM
endif

ifeq ($(USE_DEM_TWOLAYERS), true)
ifneq ($(USE_DEM), true)
PKD_CFLAGS+=-DDEM
USE_DEM=true
endif
ifneq ($(USE_COLLISIONS), true)
PKD_CFLAGS+=-DCOLLISIONS
USE_COLLISIONS=true
endif
PKD_CFLAGS+=-DDEM_TWOLAYERS
endif

ifeq ($(USE_OVERLAP_OUTPUT), true)
ifneq ($(USE_DEM), true)
PKD_CFLAGS+=-DDEM
USE_DEM=true
endif
ifneq ($(USE_COLLISIONS), true)
PKD_CFLAGS+=-DCOLLISIONS
USE_COLLISIONS=true
endif
PKD_CFLAGS+=-DOVERLAP_OUTPUT
endif

ifeq ($(USE_WALLS), true)
ifneq ($(USE_COLLISIONS), true)
PKD_CFLAGS+=-DCOLLISIONS
USE_COLLISIONS=true
endif
ifeq ($(USE_SLIDING_PATCH), true)
$(error Cannot combine WALLS and SLIDING_PATCH)
endif
PKD_CFLAGS+=-DWALLS
endif

ifeq ($(USE_SLIDING_PATCH), true)
ifneq ($(USE_COLLISIONS), true)
PKD_CFLAGS+=-DCOLLISIONS
USE_COLLISIONS=true
endif
PKD_CFLAGS+=-DSLIDING_PATCH
ifeq ($(USE_AGGREGATES), true)
PKD_CFLAGS+=-DAGGS_IN_PATCH
endif
endif

ifeq ($(USE_RUBBLE), true)
ifneq ($(USE_COLLISIONS), true)
PKD_CFLAGS+=-DCOLLISIONS
USE_COLLISIONS=true
endif
ifeq ($(USE_COLLMOD), true)
$(error RUBBLE and COLLMOD cannot be used together)
endif
PKD_CFLAGS+=-DRUBBLE_ZML
##### origin histograms ####
ifneq ($(ORIGIN_HISTOGRAM_BINS), 0)
PKD_CFLAGS+=-DORIGIN_HISTOGRAM -DNUM_ORIGIN_BINS=$(ORIGIN_HISTOGRAM_BINS)
endif
endif

ifeq ($(USE_COLLMOD), true)
ifneq ($(USE_COLLISIONS), true)
PKD_CFLAGS+=-DCOLLISIONS
USE_COLLISIONS=true
endif
PKD_CFLAGS+=-DCOLLMOD_ZML
##### origin histograms ####
ifneq ($(ORIGIN_HISTOGRAM_BINS), 0)
PKD_CFLAGS+=-DORIGIN_HISTOGRAM -DNUM_ORIGIN_BINS=$(ORIGIN_HISTOGRAM_BINS)
endif
endif

##### set definitions for different parallel types #####

# check validity...
ifneq ($(PKDGRAV_TYPE), mpi)
	ifneq ($(PKDGRAV_TYPE), pthread)
		ifneq ($(PKDGRAV_TYPE), null)
			$(error Unrecognised parallelization type "$(PKDGRAV_TYPE)")
		endif
	endif
endif

ifeq ($(PKDGRAV_TYPE), mpi)
CC=$(MPICC)
ifeq ($(USE_PARALLEL_IO), true)
PKD_AND_SS_CFLAGS+=-DSSIO_USE_MPI
endif
endif

ifeq ($(PKDGRAV_TYPE), pthread)
PTHREAD_CFLAGS=-D_REENTRANT $(PTHREAD_SWITCH)
PKD_CFLAGS+=$(PTHREAD_CFLAGS)
PKD_LDFLAGS+=$(PTHREAD_SWITCH)
PKD_LDLIBS+=$(PTHREAD_LDLIBS)
endif

.EXPORT_ALL_VARIABLES:

##### set folder stuff ####

FOLDERS = util ss coords rastoppm
CLEAN_FOLDERS = $(FOLDERS) mdl/mpi mdl/null mdl/pthread pkdgrav/mpi pkdgrav/null pkdgrav/pthread
FOLDERS += mdl/$(PKDGRAV_TYPE) pkdgrav/$(PKDGRAV_TYPE)

##########

# turn on debugging
ifeq ($(DEBUG), true)
CFLAGS+=-ggdb
endif

all: $(FOLDERS)
	@echo "Copying files"
	@mkdir -p ssrun; \
		cp `pwd -P`/Makefile.in ssrun/Makefile.$(PKDGRAV_TYPE).in && \
		cp `pwd -P`/build.log ssrun/build.$(PKDGRAV_TYPE).log && \
		cp `pwd -P`/src/pkdgrav/$(PKDGRAV_TYPE)/$(OS)/pkdgrav ./ssrun/pkdgrav.$(PKDGRAV_TYPE) && \
		cp `pwd -P`/src/ss/$(OS)/ssic ./ssrun/ssic && \
		cp etc/{lam.htab,mpeg.par,mpich.htab,openmpi.htab,ssdraw.par,sstest.par,ssa.sm.tmpl,sse.sm,ssic.par,submit.sh} ssrun && \
		sed 's@\~/bin@../bin@' etc/ssauto.par > ssrun/ssauto.par && \
		ln -fs `pwd -P`/bin/scripts/{ras2fli,ssauto,sstest} ssrun && \
		ln -fs `pwd -P`/bin/$(OS)/{rastoppm,ssa,ssdraw} ssrun && \
		cd ssrun && rm -f *.ras && rm -f ss.????? && rm -f ss.chk* && rm -f ss.coll.txt && rm -f ss.log && rm -f ssa.??? && rm -f ssa.???? && rm -f ssauto.log* && rm -f ssic.ss && cd .. & \
		cd ssrun && ln -fs pkdgrav.$(PKDGRAV_TYPE) pkdgrav && cd .. && \
		if [ $$? -ne 0 ]; then \
			echo "Problem copying files"; \
			exit $$?; \
		else \
			echo "Finished"; \
		fi
	@if [ "`grep -i warning build.log`" != "" ]; then \
		echo '### following warnings detected in build.log ###'; \
		grep -i warning build.log; \
	fi
	@if [ "`grep -i error build.log`" != "" ]; then \
		echo '### following errors detected in build.log ###'; \
		grep -i error build.log; \
	fi

# dependencies
ss: util coords rastoppm
pkdgrav: ss mdl

$(FOLDERS): force
	@mkdir -p $(PFX)/$@/$(OS) 
	@$(MAKE) -C $(PFX)/$@/$(OS) -f ../Makefile.recurse 2>&1 | tee -a build.log

.PHONY:force
force:
	@mkdir -p bin/$(OS)
	@echo "Making on `hostname` $(OS) `date`" > build.log

remake:
	$(MAKE) clean && $(MAKE)

clean:
	@for i in $(CLEAN_FOLDERS); do \
		echo "Cleaning in $$i"; \
		if [ -d $(PFX)/$$i/$(OS) ]; then \
			$(MAKE) clean -C $(PFX)/$$i/$(OS) -f ../Makefile.recurse; \
		fi; \
	done;
	rm -rf bin/$(OS)
	rm -rf lib/$(OS)
	rm -rf ssrun
