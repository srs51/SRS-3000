#!/bin/csh -f
#
# ssmflyby -- DCR 06/10/02
# ========
# Flies camera along straight line through scene (calls ssdraw).
#
set me = `basename $0`
alias ssgetopt "ssgetopt e:f:i:n:ps: \!*"
#
set args = `ssgetopt : $argv`
if ($status || $#args != 1) then
	echo "Usage: $me -e end-point [ -f frames-file ] [ -i starting-frame-number ] [ -n number-of-frames ] [ -p ] [ -s start-point ] ss-file"
	echo "       where end-point and start-point are of the form x,y,z (no spaces)"
	exit 1
endif
#
@ povshape = 2 # ssdraw particle shape value for POV objects
#
set endcp = `ssgetopt e $argv`
if ("$endcp" == "") then
	echo $me\: Endpoint missing\!
	exit 1
endif
if (`echo "$endcp" | awk -F, '{print NF}'` != 3) then
	echo $me\: Invalid endpoint format...should be \"-e x,y,z\"
	exit 1
endif
#
set frames_file = `ssgetopt f $argv`
if ("$frames_file" == "") set frames_file = frames.ssm # default
if !(-e $frames_file) then
	echo $me\: $frames_file not found
	exit 1
endif
set parfile = `head -1 $frames_file | awk '{print $3}'`
if !(-e $parfile) then
	echo $me\: $parfile not found...aborting
	exit 1
endif
@ shape = `awk '/Particle shape/{print $3}' $parfile`
#
set arg = `ssgetopt i $argv`
if ("$arg" == "") then
	@ i = 0 # default
else
	@ i = $arg
endif
if ($i < 0 || $i > 9999) then
	echo $me\: Invalid starting frame number
	exit 1
endif
#
set arg = `ssgetopt n $argv`
if ("$arg" == "") then
	@ n = 30 # default
else
	@ n = $arg
endif
if ($i + $n <= 1 || $i + $n > 10000) then
	echo $me\: Invalid number of frames
	exit 1
endif
#
set new_par = `ssgetopt p $argv`
#
set oldcp = (`awk '/Camera position/{print $3" "$4" "$5}' $parfile`)
set startcp = `ssgetopt s $argv`
if ("$startcp" == "") then
	set startcp = ($oldcp)
else if (`echo "$startcp" | awk -F, '{print NF}'` != 3) then
	echo $me\: Invalid startpoint format...should be \"-s x,y,z\"
	exit 1
endif
#
set file = $args[1]
if !(-e $file) then
	echo $me\: $file not found
	exit 1
endif
set base = $file
set ext = `echo $file | awk -F. '{print $NF}'`
if ("$ext" == "ss") set base = `echo $file | sed s/\.ss//`
unset ext
#
if ($shape == $povshape && -e $base.pov) then
	mv -f $base.pov .tmp$me
else if (-e $base.ras) then
	mv -f $base.ras .tmp$me
endif
#
set endcp = `echo $endcp | sed 's/,/ /g'`
set startcp = `echo $startcp | sed 's/,/ /g'`
set dv = (`echo '' | awk '{print ('$endcp[1]' - '$startcp[1]')/'$n'}'` \
          `echo '' | awk '{print ('$endcp[2]' - '$startcp[2]')/'$n'}'` \
          `echo '' | awk '{print ('$endcp[3]' - '$startcp[3]')/'$n'}'`)
#
@ j = 0
while ($j < $n)
	set frame = `echo '' | awk '{printf("%04d",'$i')}'`
	echo $me\: frame $frame
	set newcp = (`echo '' | awk '{print ('$startcp[1]' + '$dv[1]'*'$j')}'` \
                 `echo '' | awk '{print ('$startcp[2]' + '$dv[2]'*'$j')}'` \
                 `echo '' | awk '{print ('$startcp[3]' + '$dv[3]'*'$j')}'`)
	sed "/Camera position/s/$oldcp/$newcp/" $parfile >! .tmp$me\1
	draw:
	ssdraw -p .tmp$me\1 $file > /dev/null
	if ($status) then
		echo $me\: Error running ssdraw...skipping...
		@ i++
		@ j++
		continue
	endif
	if ($shape == $povshape) then
		mv -f $base.pov $base't'$frame.pov
	else
		mv -f $base.ras $base't'$frame.ras
	endif
	@ i++
	@ j++
end
#
if (-e .tmp$me) then
	if ($shape == $povshape) then
		mv -f .tmp$me $base.pov
	else
		mv -f .tmp$me $base.ras
	endif
endif
#
if ($new_par) then
	sed "/Camera position/s/$oldcp/$endcp/" $parfile >! .tmp$me
	if (-l $parfile) echo $me\: WARNING: $parfile soft link broken
	mv -f .tmp$me $parfile
	echo $me\: $parfile has new camera position.
endif
#
rm -f .tmp$me*
#
